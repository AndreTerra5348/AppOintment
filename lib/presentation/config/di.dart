import 'package:appointment/application/client/bloc/bloc.dart';
import 'package:appointment/application/client/register/validator.dart';
import 'package:appointment/application/client/search/bloc/bloc.dart';
import 'package:appointment/application/delete/bloc/bloc.dart';
import 'package:appointment/application/details/bloc/bloc.dart';
import 'package:appointment/application/edit/bloc/bloc.dart';
import 'package:appointment/application/register/bloc/bloc.dart';
import 'package:appointment/application/register/validator.dart';
import 'package:appointment/domain/client/entity.dart';
import 'package:appointment/domain/core/i_repository.dart';
import 'package:appointment/infrastructure/client/converter.dart';
import 'package:appointment/infrastructure/client/dao.dart';
import 'package:appointment/infrastructure/client/page_service.dart';
import 'package:appointment/infrastructure/client/repository.dart';
import 'package:appointment/infrastructure/client/table.dart';
import 'package:appointment/infrastructure/core/dao.dart';
import 'package:appointment/infrastructure/core/entity_model_converter.dart';
import 'package:appointment/infrastructure/core/i_page_service.dart';
import 'package:appointment/infrastructure/drift/db.dart';
import 'package:get_it/get_it.dart';
import 'package:injectable/injectable.dart';

import 'di.config.dart';

@injectableInit
final getIt = $initGetIt(GetIt.instance);

/// Configure Services that Injectable do not recognize, e.g. ClientModel that is generated by Drift
void servicesConfiguration() {
  getIt.registerSingleton<Dao<ClientModels, ClientModel>>(ClientDao(getIt()));

  getIt.registerSingleton<EntityModelConverter<Client, ClientModel>>(
      ClientConveter());

  getIt.registerSingleton<IPageService<Client, ClientModels, ClientModel>>(
      ClientPageService(getIt(), getIt()));

  getIt.registerSingleton<IRepository<Client>>(
      ClientRepository(getIt(), getIt()));

  getIt.registerSingleton<RegisterValidator<Client>>(ClientRegisterValidator());

  getIt.registerSingleton(RegisterBloc<Client>(getIt(), getIt()));

  getIt.registerSingleton(ClientSearchBloc(getIt()));

  getIt.registerSingleton(DetailsBloc<Client>(getIt()));
  getIt.registerSingleton(EditBloc<Client>(getIt()));
  getIt.registerSingleton(DeleteBloc<Client>(getIt()));
  getIt.registerSingleton(ClientBloc());
}
