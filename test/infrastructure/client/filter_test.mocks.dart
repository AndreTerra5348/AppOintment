// Mocks generated by Mockito 5.3.2 from annotations
// in appointment/test/infrastructure/client/filter_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:drift/drift.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeDatabaseConnectionUser_0 extends _i1.SmartFake
    implements _i2.DatabaseConnectionUser {
  _FakeDatabaseConnectionUser_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeResultSetImplementation_1<Tbl, Row> extends _i1.SmartFake
    implements _i2.ResultSetImplementation<Tbl, Row> {
  _FakeResultSetImplementation_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeJoinedSelectStatement_2<FirstT extends _i2.HasResultSet, FirstD>
    extends _i1.SmartFake implements _i2.JoinedSelectStatement<FirstT, FirstD> {
  _FakeJoinedSelectStatement_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGenerationContext_3 extends _i1.SmartFake
    implements _i2.GenerationContext {
  _FakeGenerationContext_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSelectable_4<T> extends _i1.SmartFake implements _i2.Selectable<T> {
  _FakeSelectable_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [SimpleSelectStatement].
///
/// See the documentation for Mockito's code generation for more information.
class MockSimpleSelectStatement<T extends _i2.HasResultSet, D> extends _i1.Mock
    implements _i2.SimpleSelectStatement<T, D> {
  @override
  bool get distinct => (super.noSuchMethod(
        Invocation.getter(#distinct),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  Set<_i2.ResultSetImplementation<dynamic, dynamic>> get watchedTables =>
      (super.noSuchMethod(
        Invocation.getter(#watchedTables),
        returnValue: <_i2.ResultSetImplementation<dynamic, dynamic>>{},
        returnValueForMissingStub: <
            _i2.ResultSetImplementation<dynamic, dynamic>>{},
      ) as Set<_i2.ResultSetImplementation<dynamic, dynamic>>);
  @override
  _i2.DatabaseConnectionUser get database => (super.noSuchMethod(
        Invocation.getter(#database),
        returnValue: _FakeDatabaseConnectionUser_0(
          this,
          Invocation.getter(#database),
        ),
        returnValueForMissingStub: _FakeDatabaseConnectionUser_0(
          this,
          Invocation.getter(#database),
        ),
      ) as _i2.DatabaseConnectionUser);
  @override
  set database(_i2.DatabaseConnectionUser? _database) => super.noSuchMethod(
        Invocation.setter(
          #database,
          _database,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i2.ResultSetImplementation<T, D> get table => (super.noSuchMethod(
        Invocation.getter(#table),
        returnValue: _FakeResultSetImplementation_1<T, D>(
          this,
          Invocation.getter(#table),
        ),
        returnValueForMissingStub: _FakeResultSetImplementation_1<T, D>(
          this,
          Invocation.getter(#table),
        ),
      ) as _i2.ResultSetImplementation<T, D>);
  @override
  set table(_i2.ResultSetImplementation<T, D>? _table) => super.noSuchMethod(
        Invocation.setter(
          #table,
          _table,
        ),
        returnValueForMissingStub: null,
      );
  @override
  set whereExpr(_i2.Where? _whereExpr) => super.noSuchMethod(
        Invocation.setter(
          #whereExpr,
          _whereExpr,
        ),
        returnValueForMissingStub: null,
      );
  @override
  set orderByExpr(_i2.OrderBy? _orderByExpr) => super.noSuchMethod(
        Invocation.setter(
          #orderByExpr,
          _orderByExpr,
        ),
        returnValueForMissingStub: null,
      );
  @override
  set limitExpr(_i2.Limit? _limitExpr) => super.noSuchMethod(
        Invocation.setter(
          #limitExpr,
          _limitExpr,
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool get writeReturningClause => (super.noSuchMethod(
        Invocation.getter(#writeReturningClause),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  set writeReturningClause(bool? _writeReturningClause) => super.noSuchMethod(
        Invocation.setter(
          #writeReturningClause,
          _writeReturningClause,
        ),
        returnValueForMissingStub: null,
      );
  @override
  void writeStartPart(_i2.GenerationContext? ctx) => super.noSuchMethod(
        Invocation.method(
          #writeStartPart,
          [ctx],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i3.Future<List<D>> get() => (super.noSuchMethod(
        Invocation.method(
          #get,
          [],
        ),
        returnValue: _i3.Future<List<D>>.value(<D>[]),
        returnValueForMissingStub: _i3.Future<List<D>>.value(<D>[]),
      ) as _i3.Future<List<D>>);
  @override
  _i3.Stream<List<D>> watch() => (super.noSuchMethod(
        Invocation.method(
          #watch,
          [],
        ),
        returnValue: _i3.Stream<List<D>>.empty(),
        returnValueForMissingStub: _i3.Stream<List<D>>.empty(),
      ) as _i3.Stream<List<D>>);
  @override
  _i2.JoinedSelectStatement<_i2.HasResultSet, dynamic> join(
          List<_i2.Join<_i2.HasResultSet, dynamic>>? joins) =>
      (super.noSuchMethod(
        Invocation.method(
          #join,
          [joins],
        ),
        returnValue: _FakeJoinedSelectStatement_2<_i2.HasResultSet, dynamic>(
          this,
          Invocation.method(
            #join,
            [joins],
          ),
        ),
        returnValueForMissingStub:
            _FakeJoinedSelectStatement_2<_i2.HasResultSet, dynamic>(
          this,
          Invocation.method(
            #join,
            [joins],
          ),
        ),
      ) as _i2.JoinedSelectStatement<_i2.HasResultSet, dynamic>);
  @override
  _i2.JoinedSelectStatement<_i2.HasResultSet, dynamic> addColumns(
          List<_i2.Expression<Object>>? expressions) =>
      (super.noSuchMethod(
        Invocation.method(
          #addColumns,
          [expressions],
        ),
        returnValue: _FakeJoinedSelectStatement_2<_i2.HasResultSet, dynamic>(
          this,
          Invocation.method(
            #addColumns,
            [expressions],
          ),
        ),
        returnValueForMissingStub:
            _FakeJoinedSelectStatement_2<_i2.HasResultSet, dynamic>(
          this,
          Invocation.method(
            #addColumns,
            [expressions],
          ),
        ),
      ) as _i2.JoinedSelectStatement<_i2.HasResultSet, dynamic>);
  @override
  void orderBy(List<_i2.OrderClauseGenerator<T>>? clauses) =>
      super.noSuchMethod(
        Invocation.method(
          #orderBy,
          [clauses],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void writeInto(_i2.GenerationContext? context) => super.noSuchMethod(
        Invocation.method(
          #writeInto,
          [context],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i2.GenerationContext constructQuery() => (super.noSuchMethod(
        Invocation.method(
          #constructQuery,
          [],
        ),
        returnValue: _FakeGenerationContext_3(
          this,
          Invocation.method(
            #constructQuery,
            [],
          ),
        ),
        returnValueForMissingStub: _FakeGenerationContext_3(
          this,
          Invocation.method(
            #constructQuery,
            [],
          ),
        ),
      ) as _i2.GenerationContext);
  @override
  void where(_i2.Expression<bool> Function(T)? filter) => super.noSuchMethod(
        Invocation.method(
          #where,
          [filter],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void limit(
    int? limit, {
    int? offset,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #limit,
          [limit],
          {#offset: offset},
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i3.Future<D> getSingle() => (super.noSuchMethod(
        Invocation.method(
          #getSingle,
          [],
        ),
        returnValue: _i3.Future<D>.value(null),
        returnValueForMissingStub: _i3.Future<D>.value(null),
      ) as _i3.Future<D>);
  @override
  _i3.Stream<D> watchSingle() => (super.noSuchMethod(
        Invocation.method(
          #watchSingle,
          [],
        ),
        returnValue: _i3.Stream<D>.empty(),
        returnValueForMissingStub: _i3.Stream<D>.empty(),
      ) as _i3.Stream<D>);
  @override
  _i3.Future<D?> getSingleOrNull() => (super.noSuchMethod(
        Invocation.method(
          #getSingleOrNull,
          [],
        ),
        returnValue: _i3.Future<D?>.value(),
        returnValueForMissingStub: _i3.Future<D?>.value(),
      ) as _i3.Future<D?>);
  @override
  _i3.Stream<D?> watchSingleOrNull() => (super.noSuchMethod(
        Invocation.method(
          #watchSingleOrNull,
          [],
        ),
        returnValue: _i3.Stream<D?>.empty(),
        returnValueForMissingStub: _i3.Stream<D?>.empty(),
      ) as _i3.Stream<D?>);
  @override
  _i2.Selectable<N> map<N>(N Function(D)? mapper) => (super.noSuchMethod(
        Invocation.method(
          #map,
          [mapper],
        ),
        returnValue: _FakeSelectable_4<N>(
          this,
          Invocation.method(
            #map,
            [mapper],
          ),
        ),
        returnValueForMissingStub: _FakeSelectable_4<N>(
          this,
          Invocation.method(
            #map,
            [mapper],
          ),
        ),
      ) as _i2.Selectable<N>);
  @override
  _i2.Selectable<N> asyncMap<N>(_i3.Future<N> Function(D)? mapper) =>
      (super.noSuchMethod(
        Invocation.method(
          #asyncMap,
          [mapper],
        ),
        returnValue: _FakeSelectable_4<N>(
          this,
          Invocation.method(
            #asyncMap,
            [mapper],
          ),
        ),
        returnValueForMissingStub: _FakeSelectable_4<N>(
          this,
          Invocation.method(
            #asyncMap,
            [mapper],
          ),
        ),
      ) as _i2.Selectable<N>);
}
