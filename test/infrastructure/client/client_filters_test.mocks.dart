// Mocks generated by Mockito 5.3.2 from annotations
// in appointment/test/infrastructure/client/client_filters_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:typed_data' as _i4;

import 'package:appointment/infrastructure/drift/client/client_table.dart'
    as _i3;
import 'package:drift/drift.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeColumn_0<T extends Object> extends _i1.SmartFake
    implements _i2.Column<T> {
  _FakeColumn_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeColumnBuilder_1<T extends Object> extends _i1.SmartFake
    implements _i2.ColumnBuilder<T> {
  _FakeColumnBuilder_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ClientModels].
///
/// See the documentation for Mockito's code generation for more information.
class MockClientModels extends _i1.Mock implements _i3.ClientModels {
  @override
  _i2.Column<String> get name => (super.noSuchMethod(
        Invocation.getter(#name),
        returnValue: _FakeColumn_0<String>(
          this,
          Invocation.getter(#name),
        ),
        returnValueForMissingStub: _FakeColumn_0<String>(
          this,
          Invocation.getter(#name),
        ),
      ) as _i2.Column<String>);
  @override
  bool get withoutRowId => (super.noSuchMethod(
        Invocation.getter(#withoutRowId),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  bool get dontWriteConstraints => (super.noSuchMethod(
        Invocation.getter(#dontWriteConstraints),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  bool get isStrict => (super.noSuchMethod(
        Invocation.getter(#isStrict),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  List<String> get customConstraints => (super.noSuchMethod(
        Invocation.getter(#customConstraints),
        returnValue: <String>[],
        returnValueForMissingStub: <String>[],
      ) as List<String>);
  @override
  _i2.Column<int> get id => (super.noSuchMethod(
        Invocation.getter(#id),
        returnValue: _FakeColumn_0<int>(
          this,
          Invocation.getter(#id),
        ),
        returnValueForMissingStub: _FakeColumn_0<int>(
          this,
          Invocation.getter(#id),
        ),
      ) as _i2.Column<int>);
  @override
  _i2.ColumnBuilder<int> integer() => (super.noSuchMethod(
        Invocation.method(
          #integer,
          [],
        ),
        returnValue: _FakeColumnBuilder_1<int>(
          this,
          Invocation.method(
            #integer,
            [],
          ),
        ),
        returnValueForMissingStub: _FakeColumnBuilder_1<int>(
          this,
          Invocation.method(
            #integer,
            [],
          ),
        ),
      ) as _i2.ColumnBuilder<int>);
  @override
  _i2.ColumnBuilder<BigInt> int64() => (super.noSuchMethod(
        Invocation.method(
          #int64,
          [],
        ),
        returnValue: _FakeColumnBuilder_1<BigInt>(
          this,
          Invocation.method(
            #int64,
            [],
          ),
        ),
        returnValueForMissingStub: _FakeColumnBuilder_1<BigInt>(
          this,
          Invocation.method(
            #int64,
            [],
          ),
        ),
      ) as _i2.ColumnBuilder<BigInt>);
  @override
  _i2.ColumnBuilder<int> intEnum<T>() => (super.noSuchMethod(
        Invocation.method(
          #intEnum,
          [],
        ),
        returnValue: _FakeColumnBuilder_1<int>(
          this,
          Invocation.method(
            #intEnum,
            [],
          ),
        ),
        returnValueForMissingStub: _FakeColumnBuilder_1<int>(
          this,
          Invocation.method(
            #intEnum,
            [],
          ),
        ),
      ) as _i2.ColumnBuilder<int>);
  @override
  _i2.ColumnBuilder<String> text() => (super.noSuchMethod(
        Invocation.method(
          #text,
          [],
        ),
        returnValue: _FakeColumnBuilder_1<String>(
          this,
          Invocation.method(
            #text,
            [],
          ),
        ),
        returnValueForMissingStub: _FakeColumnBuilder_1<String>(
          this,
          Invocation.method(
            #text,
            [],
          ),
        ),
      ) as _i2.ColumnBuilder<String>);
  @override
  _i2.ColumnBuilder<bool> boolean() => (super.noSuchMethod(
        Invocation.method(
          #boolean,
          [],
        ),
        returnValue: _FakeColumnBuilder_1<bool>(
          this,
          Invocation.method(
            #boolean,
            [],
          ),
        ),
        returnValueForMissingStub: _FakeColumnBuilder_1<bool>(
          this,
          Invocation.method(
            #boolean,
            [],
          ),
        ),
      ) as _i2.ColumnBuilder<bool>);
  @override
  _i2.ColumnBuilder<DateTime> dateTime() => (super.noSuchMethod(
        Invocation.method(
          #dateTime,
          [],
        ),
        returnValue: _FakeColumnBuilder_1<DateTime>(
          this,
          Invocation.method(
            #dateTime,
            [],
          ),
        ),
        returnValueForMissingStub: _FakeColumnBuilder_1<DateTime>(
          this,
          Invocation.method(
            #dateTime,
            [],
          ),
        ),
      ) as _i2.ColumnBuilder<DateTime>);
  @override
  _i2.ColumnBuilder<_i4.Uint8List> blob() => (super.noSuchMethod(
        Invocation.method(
          #blob,
          [],
        ),
        returnValue: _FakeColumnBuilder_1<_i4.Uint8List>(
          this,
          Invocation.method(
            #blob,
            [],
          ),
        ),
        returnValueForMissingStub: _FakeColumnBuilder_1<_i4.Uint8List>(
          this,
          Invocation.method(
            #blob,
            [],
          ),
        ),
      ) as _i2.ColumnBuilder<_i4.Uint8List>);
  @override
  _i2.ColumnBuilder<double> real() => (super.noSuchMethod(
        Invocation.method(
          #real,
          [],
        ),
        returnValue: _FakeColumnBuilder_1<double>(
          this,
          Invocation.method(
            #real,
            [],
          ),
        ),
        returnValueForMissingStub: _FakeColumnBuilder_1<double>(
          this,
          Invocation.method(
            #real,
            [],
          ),
        ),
      ) as _i2.ColumnBuilder<double>);
}
