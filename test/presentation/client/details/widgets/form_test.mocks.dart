// Mocks generated by Mockito 5.3.2 from annotations
// in appointment/test/presentation/client/details/widgets/form_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:appointment/application/client/details/bloc/bloc.dart' as _i2;
import 'package:appointment/application/client/details/delete/bloc/bloc.dart'
    as _i4;
import 'package:appointment/application/client/details/edit/bloc/bloc.dart'
    as _i3;
import 'package:bloc/bloc.dart' as _i6;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeClientDetailsState_0 extends _i1.SmartFake
    implements _i2.ClientDetailsState {
  _FakeClientDetailsState_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeClientDetailsEditState_1 extends _i1.SmartFake
    implements _i3.ClientDetailsEditState {
  _FakeClientDetailsEditState_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeClientDetailsDeleteState_2 extends _i1.SmartFake
    implements _i4.ClientDetailsDeleteState {
  _FakeClientDetailsDeleteState_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ClientDetailsBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockClientDetailsBloc extends _i1.Mock implements _i2.ClientDetailsBloc {
  MockClientDetailsBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ClientDetailsState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeClientDetailsState_0(
          this,
          Invocation.getter(#state),
        ),
      ) as _i2.ClientDetailsState);
  @override
  _i5.Stream<_i2.ClientDetailsState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i5.Stream<_i2.ClientDetailsState>.empty(),
      ) as _i5.Stream<_i2.ClientDetailsState>);
  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);
  @override
  void add(_i2.ClientDetailsEvent? event) => super.noSuchMethod(
        Invocation.method(
          #add,
          [event],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onEvent(_i2.ClientDetailsEvent? event) => super.noSuchMethod(
        Invocation.method(
          #onEvent,
          [event],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void emit(_i2.ClientDetailsState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void on<E extends _i2.ClientDetailsEvent>(
    _i6.EventHandler<E, _i2.ClientDetailsState>? handler, {
    _i6.EventTransformer<E>? transformer,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #on,
          [handler],
          {#transformer: transformer},
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onTransition(
          _i6.Transition<_i2.ClientDetailsEvent, _i2.ClientDetailsState>?
              transition) =>
      super.noSuchMethod(
        Invocation.method(
          #onTransition,
          [transition],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i5.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
  @override
  void onChange(_i6.Change<_i2.ClientDetailsState>? change) =>
      super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [ClientDetailsEditBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockClientDetailsEditBloc extends _i1.Mock
    implements _i3.ClientDetailsEditBloc {
  MockClientDetailsEditBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.ClientDetailsEditState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeClientDetailsEditState_1(
          this,
          Invocation.getter(#state),
        ),
      ) as _i3.ClientDetailsEditState);
  @override
  _i5.Stream<_i3.ClientDetailsEditState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i5.Stream<_i3.ClientDetailsEditState>.empty(),
      ) as _i5.Stream<_i3.ClientDetailsEditState>);
  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);
  @override
  void add(_i3.ClientDetailsEditEvent? event) => super.noSuchMethod(
        Invocation.method(
          #add,
          [event],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onEvent(_i3.ClientDetailsEditEvent? event) => super.noSuchMethod(
        Invocation.method(
          #onEvent,
          [event],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void emit(_i3.ClientDetailsEditState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void on<E extends _i3.ClientDetailsEditEvent>(
    _i6.EventHandler<E, _i3.ClientDetailsEditState>? handler, {
    _i6.EventTransformer<E>? transformer,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #on,
          [handler],
          {#transformer: transformer},
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onTransition(
          _i6.Transition<_i3.ClientDetailsEditEvent,
                  _i3.ClientDetailsEditState>?
              transition) =>
      super.noSuchMethod(
        Invocation.method(
          #onTransition,
          [transition],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i5.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
  @override
  void onChange(_i6.Change<_i3.ClientDetailsEditState>? change) =>
      super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [ClientDetailsDeleteBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockClientDetailsDeleteBloc extends _i1.Mock
    implements _i4.ClientDetailsDeleteBloc {
  MockClientDetailsDeleteBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.ClientDetailsDeleteState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeClientDetailsDeleteState_2(
          this,
          Invocation.getter(#state),
        ),
      ) as _i4.ClientDetailsDeleteState);
  @override
  _i5.Stream<_i4.ClientDetailsDeleteState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i5.Stream<_i4.ClientDetailsDeleteState>.empty(),
      ) as _i5.Stream<_i4.ClientDetailsDeleteState>);
  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);
  @override
  void add(_i4.ClientDetailsDeleteEvent? event) => super.noSuchMethod(
        Invocation.method(
          #add,
          [event],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onEvent(_i4.ClientDetailsDeleteEvent? event) => super.noSuchMethod(
        Invocation.method(
          #onEvent,
          [event],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void emit(_i4.ClientDetailsDeleteState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void on<E extends _i4.ClientDetailsDeleteEvent>(
    _i6.EventHandler<E, _i4.ClientDetailsDeleteState>? handler, {
    _i6.EventTransformer<E>? transformer,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #on,
          [handler],
          {#transformer: transformer},
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onTransition(
          _i6.Transition<_i4.ClientDetailsDeleteEvent,
                  _i4.ClientDetailsDeleteState>?
              transition) =>
      super.noSuchMethod(
        Invocation.method(
          #onTransition,
          [transition],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i5.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
  @override
  void onChange(_i6.Change<_i4.ClientDetailsDeleteState>? change) =>
      super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
}
